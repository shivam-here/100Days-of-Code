Given an integer array nums, return true if any value appears at least twice in the array, and return false if every element is distinct.

Approach

1. You can sort the array and check adjacent elements. If you find any duplicates return true. TC - O(nlogn)
2. You can use unordered_map or HashMap to make a frequency table and check if any elements have frequency more than 1. TC - O(n) and SC - O(n)
3. You can use set data structure which stores only unique elements and compare the size of the set and the original vector. TC - O(n) and SC - O(n)



Solution:

1. Using Hashmap

bool containsDuplicate(vector<int>& nums) {
        
        unordered_map<int,int> umap;
        
        for(int i=0;i<nums.size();i++)
        {
            umap[nums[i]]++;
            
            if(umap[nums[i]]>1)
                return true;
        }
        
        
       return false;
    }
    
    
2. Using Sets

bool containsDuplicate(vector<int>& nums) {
   		set<int> a;
   		for(int i=0;i<nums.size();i++)
   		  a.insert(nums[i]);
   		return (a.size()!=nums.size());
   }
